#!/usr/bin/env perl
# vim:ft=perl:ts=4:sts=4:sw=4
use strict;
use warnings;

use Digest::SHA;
use MIME::Base64 qw(encode_base64);
use POSIX qw(strftime);

######################################################################

system "perl -c -Ilib -Iext bin/verse";
die "Perl compilation failed, not packing\n" if $?;

# ---
# Build package structure
# ---
system 'rm -rf pkg/ pkg.tar.gz && mkdir pkg';
die "Could not create a clean package staging area\n" if $?;

system 'cp -a lib pkg/ && cp -a ext/* pkg/lib/';
die "Could not copy library into the package staging area\n" if $?;

# ---
# Version Handling
# ---
my $stub_out = ($ENV{GEESE_PACK_PATH}||".")."/verse-";
my $VERSION = $ARGV[0] || '';

chomp(my $sha1 = qx(git rev-parse HEAD));
$sha1 = substr($sha1, 0, 10);

if ($VERSION) {
	$stub_out .= $VERSION;
} else {
	$VERSION = '0.x.x-dev';
	$stub_out .= "dev-$sha1";
}

if (qx(git status --porcelain bin/verse bin/verse-v1 lib/)) {
	$sha1 .= '+';
	$stub_out .= '-dirty';
}
my $BUILD = "($sha1) build ".strftime("%Y%m%d.%H%M%S", gmtime);

# ---
# Brand script with version
# ---
open my $out, ">", "pkg/verse"
	or die "Failed to open pkg/verse for writing: $!\n";
open my $in, "<", "bin/verse"
	or die "Failed to open bin/verse for reading: $!\n";

while (<$in>) {
	s/^(\$Verse::VERSION) = .*$/$1 = \"$VERSION\";/;
	s/^(\$Verse::BUILD) = .*$/$1 = \" $BUILD\";/;
	print $out $_;
}

close $out;
close $in;
chmod 0755, "pkg/verse";

# ---
# Assemble the tarball (with embedded checksum)
# ---
my $fh;
system('tar -cf pkg.tar -C pkg .') == 0
	or die "Failed to compile runtime archive: $!\n";
open $fh, "<", "pkg.tar"
	or die "Failed to reopen runtime archive for reading: $!\n";
my $sha = Digest::SHA->new('sha1');
$sha->addfile($fh);
my $checksum = $sha->hexdigest;

open $fh, ">", "pkg/checksum"
	or die "Failed to open checksum file for writing: $!\n";
print $fh "$checksum\n";
close $fh;

system('tar -rf pkg.tar -C pkg ./checksum') == 0
	or die "Failed to append checksum file to runtime archive: $!\n";

system('gzip -9 pkg.tar') == 0
	or die "Failed to compress runtime archive: $!\n";

open my $o, ">", $stub_out
	or die "Failed to open $stub_out for writing: $!\n";

print $o $_ for <DATA>;
print $o "__DATA__\n$checksum\n";

my $buf;
open my $tbfh, "< :raw :bytes", "pkg.tar.gz"
	or die "Could not open tarball for reading: $!\n";

while (read($tbfh, $buf, 60*57)) {
	print $o encode_base64($buf);
}
close $o;
chmod 0755, $stub_out;

print "GEESE RUNTIME ARCHIVE:\n";
system("tar -tzvf pkg.tar.gz");
print "\n---\n";
print "packaged v$VERSION as $stub_out\n\n";

# clean up after the geese
system 'rm -rf pkg/ pkg.tar.gz';

__DATA__
#!/usr/bin/perl
use strict;
use warnings;

use MIME::Base64 qw/decode_base64/;
use FindBin;

# Genesis Extraction and Execution Stub Engine (GEESE)
#
# This perl script contains the entire runtime environment needed to execute 
# Verse.  It unpacks the compressed contents into your ~/.verse/ directory
# then passes execution to the ~/.verse/verse Perl script that was
# extracted, using the libraries located in ~/.verse/lib.
#
# Once extracted, further execution of this stub will use the previously
# extracted library after checking that the checksum is identical.  This way,
# new versions will be properly handled.

die "You have no \$HOME.  Please set one and re-run.\n"
	unless $ENV{HOME};

my $root = "$ENV{HOME}/.verse";
mkdir $root unless -d $root;

# check the checksum to see if we should untar
my ($fh, $want, $have) = (undef, "", "");
chomp($want = <DATA>);
open $fh, "<", "$root/checksum" or $fh = undef;
if ($fh) {
	chomp($have = <$fh>);
	close $fh;
}

if ($want ne $have) {
	system("rm -rf $root/*");

	# extract the payload
	print STDERR "(inflating verse runtime...)\n";
	open my $tar, "|-", "tar -xzf - -C $root"
		or die "Failed to do stuff\n";
	while (<DATA>) {
		chomp;
		print $tar decode_base64($_);
	}
	close $tar;
}

# run it!
$ENV{PERL5LIB} = "$root/lib";
chmod 0755, "$root/verse";
exec "$root/verse", @ARGV;
exit(1);
